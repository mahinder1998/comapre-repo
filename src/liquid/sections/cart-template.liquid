<style type="text/css">
.modal-gwp-added { position: fixed; z-index: 1; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background-color: rgb(0,0,0); background-color: rgba(0,0,0,0.7); z-index: 9999; } .gwp-modal-content { background-color: #fefefe; margin: auto; padding: 25px; border: 1px solid #888; width: 450px; position: absolute; left: calc(50% - 225px); font-size: 16px; top: calc(40% - 75px); } span.loading-dotts > img { width: 35px; display: block; position: relative; top: 6px; margin: 0 auto; }
</style>
{% if cart.item_count > 0 %}
<section id="cart-container" class="padding_lg {{ section.id }}">
  <h1 class="cart-title">Your Cart</h1>
  <form action="/cart" method="post" id="cartform">
    <div class="cart-body">
      <div class="cart-main-data">
        <div class="cart-titles">
          <div class="cart-item-t">PRODUCTS</div>
          <div class="cart-qty-t">QUANTITY</div>
          <div class="cart-total-t">PRICE</div>
        </div>
        {% for item in cart.items %}
        {% capture item_title %}{{ item.title | escape }}{% endcapture %}
          <cart-item data-id="{{item.id}}">
            <div class="cart-items-loop th_pb_cart_line" item-loop="item-{{ forloop.index }}" data-idth="{{ item.id }}" data-indexth="{{ forloop.index }}">
          <div class="cart-item-img">
            <div>
              <a href="{{ item.product.url }}" title="{{ item_title }} — {{ item.product.description | strip_html | truncate: 50 | escape }}"> 
                 <img class="cart__image{% if item.image == null %} hide{% endif %}" src="{{ item | img_url: 'small' }}" alt="{{ item.image.alt | escape }}" data-cart-item-image>                   
              </a>
            </div>
            <div class="cart-title-dt">
              <p><a href="{{ item.product.url }}">{{ item.product.title }}</a></p>
               {%- assign variant_options = 'template ' | split: ' ' -%}
                    {%- if item.product.has_only_default_variant != true -%}
                      {%- assign variant_options = item.options_with_values -%}
                    {%- endif -%}
                    {%- assign property_size = item.properties | size -%}
                    
                    {%- assign variant_options_hide = false -%}
                    {% if item.product.has_only_default_variant and property_size == 0 %}
                     {%- assign variant_options_hide = true -%}
                   {% elsif variant_options.size == 1 and variant_options[0].value == "Default title" %}
                     {%- assign variant_options_hide = true -%}
                    {% endif %}
        {% assign remove_qty = false %}            
                    <ul class="item-variant-details{% if variant_options_hide and property_size == 0 %} hide{% endif %}" >
                      {%- for option in variant_options -%}
                        <li class="product-details__item--variant-option{% if item.product.has_only_default_variant %} hide{% endif %}" data-cart-item-option>{{ option.name }}: {{ option.value }}</li>
                      {%- endfor -%}
                      {%- assign properties = 'template ' | split: ' ' -%}
                  {%- if property_size > 0 -%}
                    {%- assign properties = item.properties -%}
                  {%- endif -%}
                  {%- for p in properties -%}
                      {% for block in section.blocks %}
                       {% if p.last == block.settings.bundle_id %}
                         <span class="cart_bundle_label">{{ block.settings.bundle_label }}</span>
                         {% endif %}
                      {% endfor %}
                    {%- if p.first contains '_th_bundle_type' -%}
                         {% assign remove_qty = true %}  
                      <span class="th_bundle_discount_text"></span>
                      {%- continue -%}
                    {%- endif -%}
                    {% assign property_first_char = p.first | slice: 0 %}
                    <li class="product-details__item product-details__item--property
                      {%if property_size == 0 or p.last == blank or property_first_char == '_' %} hide{% endif %}" data-cart-item-property>
                      <span class="product-details__item-label" data-cart-item-property-name>{{ p.first }}: </span>

                      {%- comment -%}
                        Check if there was an uploaded file associated
                      {%- endcomment -%}
                      <span data-cart-item-property-value>
                        {%- if p.last contains '/uploads/' -%}
                          <a href="{{ p.last }}" data-role="product-upload">{{ p.last | split: '/' | last }}</a>
                        {%- else -%}
                          {{ p.last }}
                        {%- endif -%}
                      </span>
                    </li>
                  {%- endfor -%}
              </ul>
              {% if item.final_line_price == 0 %}
                {% else %}
                  <p class="cart__remove">
                    <a href="/cart/change?line={{ forloop.index }}&amp;quantity=0" class="text-link text-link--accent th_pb_remove_cart_item" aria-label="{{ 'cart.label.remove' | t: product: item.title }}" data-cart-remove data-role="product-remove">Delete {% include 'delete' %}</a>
                  </p>
              {% endif %}
            </div>

          </div>
          <div class="cart-item-qty">
            <div class="cart-title-mob">
            <p><a href="{{ item.product.url }}">{{ item.product.title }}</a></p>
            {% assign remove_qty = false %}            
                     <ul class="item-variant-details{% if variant_options_hide and property_size == 0 %} hide{% endif %}" >
                      {%- for option in variant_options -%}
                        <li class="product-details__item--variant-option{% if item.product.has_only_default_variant %} hide{% endif %}" data-cart-item-option>{{ option.name }}: {{ option.value }}</li>
                      {%- endfor -%}
                       {%- assign properties = 'template ' | split: ' ' -%}
                  {%- if property_size > 0 -%}
                    {%- assign properties = item.properties -%}
                  {%- endif -%}
                  {%- for p in properties -%}
                      {% for block in section.blocks %}
                       {% if p.last == block.settings.bundle_id %}
                         <span class="cart_bundle_label">{{ block.settings.bundle_label }}</span>
                         {% endif %}
                      {% endfor %}
                    {%- if p.first contains '_th_bundle_type' -%}
                         {% assign remove_qty = true %}  
                      <span class="th_bundle_discount_text"></span>
                      {%- continue -%}
                    {%- endif -%}
                    {% assign property_first_char = p.first | slice: 0 %}
                    <li class="product-details__item product-details__item--property
                      {%if property_size == 0 or p.last == blank or property_first_char == '_' %} hide{% endif %}" data-cart-item-property>
                      <span class="product-details__item-label" data-cart-item-property-name>{{ p.first }}: </span>
                      {%- comment -%}
                        Check if there was an uploaded file associated
                      {%- endcomment -%}
                      <span data-cart-item-property-value>
                        {%- if p.last contains '/uploads/' -%}
                          <a href="{{ p.last }}" data-role="product-upload">{{ p.last | split: '/' | last }}</a>
                        {%- else -%}
                          {{ p.last }}
                        {%- endif -%}
                      </span>
                    </li>
                  {%- endfor -%}
              </ul>
            </div>
            <div class="qty-selc">
    
              <div class="qty-slctor-arws {% if remove_qty %} remove_qty {% endif %}"> 
                <p class="qty-txt-mob">Qty</p>

                {%- if item.line_price != 0 -%}
                <a class="minusqty updateqty" data-loop="" qty-index="{{ forloop.index }}">{% include 'down-arrow' %}</a>               
                <input {% if remove_qty %}disabled{% endif %} name="updates[]" type="text" class="qtycart cart-quantity" id="updates_{{ item.cart_index }}" onfocus="this.select();" value="{{ item.quantity }}" size="2" variant-id="{{item.id}}"/>
                <a class="addqty updateqty" qty-index="{{ forloop.index }}">{% include 'upper-arrow' %}</a>
                {%- elsif item.line_price == 0 -%}
                <input name="updates[]" type="text" class="qtycart cart-quantity" id="updates_{{ item.cart_index }}" value="1" size="1"/>
                {%- endif-%}


              </div>
              
              <div class="mobile-cart-compair th_item_line_price">     
                
                {% assign final_compare_price = item.variant.compare_at_price | times: item.quantity %}
                {% if final_compare_price and final_compare_price > item.final_line_price %}
                <p class="pdp__content__price__compare">{{ final_compare_price | round | money }}</p>
                {% endif %}
                <p class="price-cart-mob">{{ item.final_line_price | money }}</p>
              </div>

            </div>   
            {% if item.final_line_price == 0 %}
              {% else %}
              <p class="cart__remove">
                <a href="/cart/change?line={{ forloop.index }}&amp;quantity=0" class="text-link text-link--accent th_pb_remove_cart_item" aria-label="{{ 'cart.label.remove' | t: product: item.title }}" data-cart-remove data-role="product-remove">Delete {% include 'delete' %}</a>
              </p>               
            {% endif %} 
          </div>
            <div class="cart-item-price th_item_line_price">
                {% if item.final_line_price == 0 %}
                  <p>FREE</p>
                {% elsif item.final_line_price > 0 %}
                {% assign final_compare_price = item.variant.compare_at_price | times: item.quantity %}
                {% if final_compare_price and final_compare_price > item.final_line_price %}
                      <p class="pdp__content__price__compare">{{ final_compare_price | round | money }}</p>
                {% endif %}
                <p>{{ item.final_line_price | money }}</p>
              {% endif %}

          </div>
        </div>
          </cart-item>
        {% endfor %}

        

     <!-- -->

     {% if section.settings.enable_gift_message %}
          
          <div class="cart__footer">
      <div class="grid-wrapper">

        <div class="col-sp-sm col-sp-md">
          <label for="CartSpecialInstructions" class="cart-note__label small--text-center">Would you like a FREE gift box and gift message?</label>
        <textarea name="note" id="CartNote" style="display:none;">{{ cart.note }}</textarea>
          <!-- Yes and No content goes here-->
          <div class="login-wrap">
            <div class="radio-group">
              
              <input type="checkbox" id="{{ formId }}-mrs" class="giftyes" data-name="Gift box"  value="Yes">
              <label for="{{ formId }}-mrs">Yes</label>
            </div>
          </div>

          
          <!-- Gift message option code goes here-->
          
          <!-- 12-07-21 -->
          
          <style>
            .giftmessage textarea:disabled { background:#eee; overflow:hidden;}
          </style>
          <!-- end of 12-07-21-->
         
     <div class="gift_msg">
          <div class="login-wrap giftmessage ">
            <div class="radio-group">
              <input type="checkbox" class="message_gift" id="{{ formId }}-ms_chk_gift_msg" name="choice-giftmessage"  />
              <label for="{{ formId }}-ms_chk_gift_msg">I would like to provide a gift message.</label>
            </div>
            
              
                <div class="gift_notes_not_checked">
                <textarea  id="CartSpecialInstructions" class="cart-note__input" 
                            placeholder="Please enter a message up to 250 characters (including spaces)*"
                            disabled="disabled"
                            value="None"
                            data-name="Gift message"  >
                </textarea>
            <span id="countcharacter"></span><br>
            </div>    
            
            
            
          </div>

          <span class="custom-cart-text">
              {{ section.settings.giftmessage }}
          </span>
       </div>
        </div>

      </div>
    </div>

    {% endif %}
          
          <!-- -->


  </div>

      <div class="right-side-cart cart-main-prices">

        <div class="flex-bet shipping-free">
          <span class="cart-subtotal__title">SHIPPING </span>
          <span class="cart-subtotal__price">Free</span>
        </div>
        <div class="shipping-day">
          <p>Free Shipping within 5-7 days</p>
        </div>
        <div colspan="5" class="total_vat">
        <h4 class="flex-bet">
          <span class="vat__title">VAT</span>
          <span class="cart-subtotal__title cart_vat"></span>
        </h4>
      </div>
        <div colspan="5" class="subtotal">
          <h4 class="flex-bet">
            <span class="cart-subtotal__title">Subtotal</span>
            <span class="cart-subtotal__title cart_subtotal"><span class="th_cart_total_price"><span class="th_cart_total_price">{{ cart.total_price | money }}</span></span></span>
          </h4>
        </div>
        <div class="vat-shiping">
          <p>(VAT included)</p>
        </div>
        <div id="cart-right">
          
          <div class="promo_code_wrap">
            <div class="promo-title"> Have a promocode?  </div>
              <div class="promo-body">
                <form class="promo-form">
                  <div class="form-group form_inline">
                    <input type="text" placeholder="Enter promo code"  class="form_control" id="promo_coupon">
                    <button type="submit" class="btn-ctm promo-submit" id="redemDevPromo"> APPLY  </button>
                  </div>
                </form>
              </div>
            
          </div> 
          
          <input name="checkout" type="submit" class="button" id="checkout-button" value="PROCEED TO CHECKOUT">
          {% if additional_checkout_buttons %}
          <div class="additional-checkout-buttons">
            {{ content_for_additional_checkout_buttons }}
          </div>
          {% endif %}
        </div>

        <div class="tabby-custom">
          <div class="tb-img">
            {% render 'icon-tabby' %} 
          </div>
          <div class="tb-content">
            {% if request.locale.iso_code == 'ar' %}  
            <h3 style="font-size:14px;">قسمها على 4 دفعات وبدون فوائد</h3>
            <p>1/4 اليوم والباقي على 3 أشهر بدون رسوم </p>
            {% else %}
          <h3>Split into 4 Payments</h3>
          <p>1/4 today, and the rest within 3 months without fees</p>
          {% endif %} 
          </div>
        </div>
        <!-- tamara cart html start -->

        <div class="tabby-custom tamara-icon-cart">
          <div class="tb-img">
          {% if request.locale.iso_code == 'ar' %}  
              <img src="{{"tamara-arabic-logo.png" | asset_img_url: "original"}}"> 
            {% else %}
              <img src="{{"tamara-logo.png" | asset_img_url: "original"}}"> 
          {% endif %}
          </div> 
          <div class="tb-content">
            {% if request.locale.iso_code == 'ar' %}  
            <h3 style="font-size:14px;">قسمها على 3 دفعات وبدون فوائد</h3>
            <p>1/3 اليوم والباقي على 2 أشهر بدون رسوم </p>
            {% else %}
          <h3>Split into 3 Payments</h3>
          <p>1/3 today, and the rest within 2 months without fees</p>
          {% endif %}
          </div>
        </div> 

        <!-- tamara cart html end -->


      </div>
    </div>
    
  </form>
</section>
{%else%}
<section class="empty-section">
  <h1 class="cart-title">Your Cart</h1>
  <div class="page-container">
    <p>Your cart is empty!</p>
    <a href="{{shop.url}}" class="btn">CONTINUE SHOPPING</a>
  </div>

</section>
{%endif%}
<style>
  .mb-search-logo-flex .mb-cart-flex, .remove_qty{pointer-events: none;}
  .th_bundle_discount_text, .cart_bundle_label{font-size:12px; line-height:normal; margin:8px 0;}
  .remove_qty .updateqty {
      background: #F5F5F5;
      opacity: .5;
      pointer-events: none;
  }
  .th_bundle_discount_text{display: none !important;}
</style>
{% comment %} //// new cart script {% endcomment %}
<script>

class CartItem extends HTMLElement{
constructor(){
super();
this.minusBtn = this.querySelector('.minusqty');
this.plusBtn = this.querySelector('.addqty');
this.qnInput = this.querySelector('.qtycart');
this.deleteBtn = this.querySelector('[data-role="product-remove"]');

this.plusBtn ? this.plusBtn.addEventListener('click',this.updateQuantity.bind(this,this.plusBtn)) : '';
this.minusBtn ? this.minusBtn.addEventListener('click',this.updateQuantity.bind(this,this.minusBtn)) : '';
this.qnInput.addEventListener('change',this.updateItemQn.bind(this,false));
this.deleteBtn ? this.deleteBtn.addEventListener('click',(e)=>{
  e.preventDefault();
  this.updateItemQn(true);
}) : '';
this.addEventListener('updated-cart',this.updateCartInfo.bind(this));

// listening to cart updates to add or remove gwp products
this.addEventListener('updated-cart',(e)=>{
  this.gwpProduct.bind(this)(e.detail);
})

// onload
window.addEventListener('load',this.onLoadGwpHandle.bind(this))
}
// quantity update
updateQuantity(el){
let currentVal = Number(this.qnInput.value);
let changeEvent = new CustomEvent('change');
if(el.classList.contains("addqty")){
  let newVal = ++currentVal;
  this.qnInput.value = newVal;
  this.qnInput.dispatchEvent(changeEvent);
}else{
  let newVal = --currentVal;
  if(currentVal >= 1){
    this.qnInput.value =  newVal;
    this.qnInput.dispatchEvent(changeEvent);
 
  }
}
}
// loader display

showLoader(text){
let loaderPopup = document.querySelector("#mymodalgwp");
loaderPopup.querySelector("#gwptext").textContent = text;
loaderPopup.classList.remove('hide');
}
hideLoader(){
let loaderPopup = document.querySelector("#mymodalgwp");
loaderPopup.classList.add('hide');
}
// quantity update ajax request
updateItemQn(remove,updateData=false){
let quantity = !remove ? Number(this.qnInput.value) : 0;
let id = Number(this.dataset.id);
let data =  {
  updates:{
    [id]: quantity
  },
  sections:'{{ section.id }}',
} 

this.showLoader("Updating cart...");
fetch(window.Shopify.routes.root + 'cart/update.js', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(data)
  })
  .then(response => {
     return response.json();
  })
  .then(data =>{
    this.updateCartInfo(data.sections['{{ section.id }}'])
    this.dispatchEvent(new CustomEvent("updated-cart",{detail:data}))
    this.hideLoader();
 
  })
  .catch((error) => {
    console.error('Error:', error);
  });
}

// update cart info
updateCartInfo(cartString){
let parser = new DOMParser();
let cartHtml = parser.parseFromString(cartString,"text/html")
document.querySelector('#shopify-section-{{ section.id }}').innerHTML = cartHtml.querySelector('#shopify-section-{{ section.id }}').innerHTML;
}

{% if section.settings.enable_gwp_content %}
// GWP update
gwpProduct(cartData){
let gwpValue = Number('{{ section.settings.gwp_cart_val }}');
let aboveValueProducts = [
  {% if section.settings.gwp_above_value_1 != blank %}
  {
      id:'{{ section.settings.gwp_above_value_1.variants[0].id }}',
      quantity:1
  },
  {% endif %}
  {% if section.settings.gwp_above_value_2 != blank %}
  {
      id:'{{ section.settings.gwp_above_value_2.variants[0].id }}',
      quantity:1
  },
  {% endif %}
  {% if section.settings.gwp_above_value_3 != blank %}
  {
      id:'{{ section.settings.gwp_above_value_3.variants[0].id }}',
      quantity:1
  },
  {% endif %}
]
let belowValueProduct = {
  id:'{{ section.settings.gwp_below_value_1.variants[0].id }}',
  quantity:1
}

// check for existing products
let aboveValExistingPrd = cartData.items.filter(item => aboveValueProducts.find(prd => Number(prd.id) == Number(item.id)))
let belowValExistingPrd = cartData.items.filter(item => Number(belowValueProduct.id) == Number(item.id));
let cartValue = cartData.total_price/100;
let data = {
    updates:{},
    sections:'{{ section.id }}',
  }
if(cartValue > gwpValue){
    let productsToAdd = aboveValExistingPrd.length > 0 ? aboveValueProducts.filter(prd => {
      let aboveExitingId = aboveValExistingPrd.map(prd => Number(prd.id));
      return aboveExitingId.indexOf(Number(prd.id)) == -1
    }) : aboveValueProducts;
    let productToRemove = belowValExistingPrd.length > 0 ? belowValExistingPrd : [];
    productsToAdd.forEach(prd =>{
      data.updates[Number(prd.id)] = 1
    })
    productToRemove.length > 0 ? productToRemove.forEach(prd =>{
      data.updates[Number(prd.id)] = 0
    }) : '';
}else{
  let productToRemove = aboveValExistingPrd.length > 0 ? aboveValueProducts.filter(prd => {
    let aboveExitingId = aboveValExistingPrd.map(prd => Number(prd.id));
    return aboveExitingId.indexOf(Number(prd.id)) != -1
  }) : [];
  let productToAdd = belowValExistingPrd.length == 0 && cartValue > 0 ? [belowValueProduct] : [];
  belowValExistingPrd.length > 0 && cartValue == 0 ? productToRemove.push({id: belowValueProduct.id,quantity:0}): '';
  productToRemove.forEach(prd =>{
      data.updates[Number(prd.id)] = 0
    })
  productToAdd.forEach(prd =>{
    data.updates[Number(prd.id)] = 1
  });
}
if(Object.keys(data.updates).length > 0){
  this.showLoader("Updating Complimentary gift");
  fetch(window.Shopify.routes.root + 'cart/update.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data)
    })
    .then(response => {
      return response.json();
    })
    .then(data =>{
      this.updateCartInfo(data.sections['{{ section.id }}'])
      this.hideLoader();
    })
    .catch((error) => {
      console.error('Error:', error);
    });
}

}
onLoadGwpHandle(){
fetch("/cart.js").then(res => res.json()).then(data => this.gwpProduct(data)).catch(err => console.log(err))
}


{% endif %}
//giftbox

}
customElements.define('cart-item',CartItem);

// gift box
document.addEventListener('change',(e)=>{
if(e.target.classList.contains('giftyes') || e.target.closest('.giftyes')){
let el = e.target.classList.contains('giftyes') ? e.target : e.target.closest('.giftyes');
document.querySelector(".gift_msg").style.display = el.checked ? 'block' : 'none';
}
})
document.addEventListener('change',(e)=>{
if(e.target.classList.contains('message_gift') || e.target.closest('.message_gift')){
let el = e.target.classList.contains('message_gift') ? e.target : e.target.closest('.message_gift');
el.checked ? document.querySelector(".cart-note__input").removeAttribute("disabled") : document.querySelector(".cart-note__input").setAttribute("disabled","disabled") ;
}
})
document.addEventListener('change',(e)=>{
if(e.target.classList.contains('cart-note__input') || e.target.closest('.cart-note__input')){
let el = e.target.classList.contains('cart-note__input') ? e.target : e.target.closest('.cart-note__input');
document.querySelector('#CartNote').value = el.value;
}
})
</script>
{% schema %} 
{
  "name": "Cart GWP Settings",
  "settings": [
    {
      "type": "header",
      "content": "Gift Box & Message"
    },
    {
      "type": "checkbox",
      "id": "enable_gift_message",
      "label": "Enable Gift Box & Message"
    },
    {
      "type": "header",
      "content": "GWP Settings"
    },
    {
      "type": "checkbox",
      "id": "enable_gwp_content",
      "label": "Enable GWP?",
      "default": false
    },

    {
      "type": "text",
      "id": "gwp_cart_val",
      "label": "GWP total cart value"
    }, 
    {
      "type": "product",
    "id": "gwp_above_value_1",
    "label": "GWP above value 1"
    }, 
    
    {
      "type": "product",
    "id": "gwp_above_value_2",
    "label": "GWP above value 2"
    }, 
    {
      "type": "product",
    "id": "gwp_above_value_3",
    "label": "GWP above value 3"
    }, 
    {
      "type": "product",
    "id": "gwp_below_value_1",
    "label": "GWP below value 1"
    },         
 
     {
      "type": "text",
      "id": "giftmessage",
      "label": "gift message note"
      }      
],
"blocks":[
 {
     "type": "bundle",
     "name": "bundle label",
     "settings":[
        {
            "type": "number",
            "id": "bundle_id",
            "label": "bundle id"
        },
   {
            "type": "text",
            "id": "bundle_label",
            "label": "bundle label"
        }
]
}
]
}
{% endschema %}
